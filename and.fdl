dp and(in A, B : ns(1);
		 out R : ns(1)) {

	always {
		R = A & B;
	}

}

dp testAnd(out A, B:ns(1); in R:ns(1)) {
	always{$display($dec, "Cycle:", $cycle, ", A=", A , ", B=", B , ", R=", R);}
	sfg test_0 { A=0; B=1;}
	sfg test_1 { A=1; B=1;}
	sfg test_2 { A=0; B=0;}
}

fsm f_testbench(testAnd){
	initial s0; // begin with state s0
	state s1, s2; // other states are: s1, s2
	@s0 (test_0) -> s1; // run test_0 and go to s1
	@s1 (test_1) -> s2; // run test_1 and go to s2
	@s2 (test_2) -> s0; // run test_2 and go to s0
}

system myAnd {
	and(A, B, R);
	testAnd(A, B, R);
}