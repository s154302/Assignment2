dp adder(in A, B : tc(32);
		 out R : tc(32)) {

	always {
		R = A + B;
	}

}

dp ALU( in A, B : tc(32);
		in select : ns(3);
		out R : tc(32);
		out N, Z : ns(1)) {

	always{
		R = (select == 0) ? (A - B) :
			(select == 1) ? (A + B) :
			(select == 2) ? A :
			(select == 3) ? B :
			(select == 4) ? A >> 5 : 
								0;

		N = R[31];
		Z = (R==0) ? 1 : 0;

	}
}

dp mux(in A, B : tc(32);
		in s : ns(1);
		out R : tc(32)) {

	always {
		R = s ? A : B;
	}
}

dp PC(out pc_out : ns(5);
		in pc_in : ns(5)) {

	reg a : ns(5);

	always{
		a = pc_in;
		pc_out = a;
	}

}

dp registerFile(in aSel, bSel, storeSel : ns(3);
			in storeEnable : ns(1);
			in storeData : tc(32);
			out a, b : tc(32)) {

	reg R0, R1, R2, R3, R4, R5, R6, R7 : tc(32);
	always{
		R0 = 0;
		a = (aSel==0) ? R0 :
			(aSel==1) ? R1 :
			(aSel==2) ? R2 :
			(aSel==3) ? R3 :
			(aSel==4) ? R4 :
			(aSel==5) ? R5 :
			(aSel==6) ? R6 :
			(aSel==7) ? R7 :
							 0;

		b = (aSel==0) ? R0 :
			(aSel==1) ? R1 :
			(aSel==2) ? R2 :
			(aSel==3) ? R3 :
			(aSel==4) ? R4 :
			(aSel==5) ? R5 :
			(aSel==6) ? R6 :
			(aSel==7) ? R7 :
							 0;

		R1 = (storeSel==1 & storeEnable) ? storeData : R1;
		R2 = (storeSel==2 & storeEnable) ? storeData : R2;
		R3 = (storeSel==3 & storeEnable) ? storeData : R3;
		R4 = (storeSel==4 & storeEnable) ? storeData : R4;
		R5 = (storeSel==5 & storeEnable) ? storeData : R5;
		R6 = (storeSel==6 & storeEnable) ? storeData : R6;
		R7 = (storeSel==7 & storeEnable) ? storeData : R7;
	}
}

dp controller(	in opcode : ns(4);
				out storeEnable, sMUXA, sMUXB, write, read, branch : ns(1);
				out sALU : ns(2)) {

	always {
		storeEnable = ~(opcode[3]) | opcode[0];
		sALU = opcode[1:0];
		sMUXA = opcode[2];
		sMUXB = ~(opcode[3]);
		write = opcode[3] & opcode[1];
		read = opcode[3] & opcode[0];
		branch = opcode[3] & opcode[2];
	}
}

sytem CPU {
	PC(pc_out, pc_in);
	instmem(pc_out, wr, rd, idata, odata)
	decoder();
	registerFile(aSel, bSel, storeSel, storeEnable, storeData, aALU, B);
	controller(opcode, storeEnable, sMUXA, sMUXB, write, read, branch, sALU);
	mux(B, immediate, sMUXA, bALU);
	ALU(aALU, bALU, sALU, rALU, zALU);
	mux(rALU, bMem, sMUXB, rMUXB);
	and(zALU, branch, sMUXC);
	mux(adder_out, immediate, sMUXC, rMUXC);
	adder();
}