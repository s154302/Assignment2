$option "vcd"
$option "profile_toggle_alledge"
$option "profile_display_operations"

dp PC(out pc_out : ns(5);
    in immediate : ns(5);
    in pc_b, pc_stall : ns(1)) {

  reg a: ns(5);

  always{
    pc_out = pc_stall ? a : (pc_b ? immediate : a+1);
    a = pc_out;
  }

}

dp adder(in A : tc(32);
		out R : tc(32)) {

  always {
    R = A + 1;
  }

}

dp ALU( in A, B : tc(32);
		in select : ns(2);
		out R : tc(32);
		out N : ns(1)) {

	always{
		R = (select == 0) ? A :
			(select == 1) ? (A + B) :
			(select == 2) ? (A - B) :
			(select == 3) ? A >> B : 
								0;

		N = R[31];

	}
}

dp muxA(in A, B : tc(32);
    in s : ns(1);
    out R : tc(32)) {

  always {
    R = s ? A : B;
  }
}

dp muxB(in A, B : tc(32);
    in s : ns(1);
    out R : tc(32)) {

  always {
    R = s ? A : B;
  }
}

dp muxC(in A, B : tc(32);
    in s : ns(1);
    out R : tc(32)) {

  always {
    R = s ? A : B;
  }
}

ipblock instmem(in address : ns(5);
		in wr, rd : ns(1);
		in idata : ns(32);
		out odata : ns(19)){

	iptype "ram";
	ipparm "size=64";
	ipparm "wl=319";
	ipparm "file=instructions.txt";
}



dp registerFile(in aSel, bSel, storeSel : ns(3);
				in storeEnable : ns(1);
				in storeData : tc(32);
				out a, b : tc(32)) {

  reg R0, R1, R2, R3, R4, R5, R6, R7 : tc(32);
  always{
    R0 = 0;
    a = (aSel==0) ? R0 :
      (aSel==1) ? R1 :
      (aSel==2) ? R2 :
      (aSel==3) ? R3 :
      (aSel==4) ? R4 :
      (aSel==5) ? R5 :
      (aSel==6) ? R6 :
      (aSel==7) ? R7 :
               			0;

    b = (bSel==0) ? R0 :
      (bSel==1) ? R1 :
      (bSel==2) ? R2 :
      (bSel==3) ? R3 :
      (bSel==4) ? R4 :
      (bSel==5) ? R5 :
      (bSel==6) ? R6 :
      (bSel==7) ? R7 :
               			0;

    R1 = (storeSel==1 & storeEnable) ? storeData : R1;
    R2 = (storeSel==2 & storeEnable) ? storeData : R2;
    R3 = (storeSel==3 & storeEnable) ? storeData : R3;
    R4 = (storeSel==4 & storeEnable) ? storeData : R4;
    R5 = (storeSel==5 & storeEnable) ? storeData : R5;
    R6 = (storeSel==6 & storeEnable) ? storeData : R6;
    R7 = (storeSel==7 & storeEnable) ? storeData : R7;
  }
}

dp controller(  in opcode : ns(4);
        out storeEnable, sMUXA, sMUXB, rd, wr, branch, mwi : ns(1);
        out sALU : ns(2)) {

  always {
    storeEnable = ~(opcode[3]) | opcode[0]; 
    sALU = opcode[1:0]; 
    sMUXA = opcode[2]; 
    sMUXB = ~(opcode[3]); 
    wr = (opcode[3] & opcode[2]) & ~opcode[1];
    rd = opcode[3] & opcode[0];
    branch = opcode[3] & opcode[1];
    mwi = (opcode[3] & opcode[2]) & opcode[0];
  }
}

dp decoder(	in instruction : ns(19);
			out storeSel, aSel, bSel : ns(3);
			out opcode : ns(4);
			out immediate : tc(9)) {

  always {
    opcode = instruction[18:15];
    storeSel = instruction[14:12];
    aSel = instruction[11:9];
    bSel = instruction[8:6];
    immediate = instruction[8:0];
  }
}

dp and(in A, B : ns(1);
		 out R : ns(1)) {

	always {
		R = A & B;
	}

}
 
///////////////////////////
// CPU
///////////////////////////

dp CPU(
        out M_datain : ns(32);
        out M_cmd : ns(32);
        out M_datainrdy : ns(1);
        in M_dataout : ns(32);
        in M_dataoutrdy : ns(1)
       ){


  sig stall, storeEnable, sMUXA, sMUXB, rd, wr, branch, mwi, pc_b, nALU : ns(1);
  sig sALU : ns(2);
  sig storeSel, aSel, bSel : ns(3);
  sig opcode : ns(4);
  sig pc_out, pc_in : ns(5);
  sig immediate : tc(9);
  sig odata : ns(19);
  sig aALU, B, bALU, rALU, bMem, data, storeData : tc(32);

	use PC(pc_out, immediate, pc_b, stall);
	use instmem(pc_out, 0, 1, 0, odata);
	use decoder(odata, storeSel, aSel, bSel, opcode, immediate);
	use controller(opcode, storeEnable, sMUXA, sMUXB, rd, wr, branch, mwi, sALU);
	use registerFile(aSel, bSel, storeSel, storeEnable, storeData, aALU, B);
	use muxA(B, immediate, sMUXA, bALU);
	use ALU(aALU, bALU, sALU, rALU, nALU);
	use muxB(rALU, M_dataout, sMUXB, storeData);
	use and(nALU, branch, pc_b);
	
	$trace(rALU, "traces/rALU.seq");
	$trace(sMUXB, "traces/sMUXB.seq");
	$trace(M_dataoutrdy, "traces/M_dataoutrdy.seq");
	$trace(M_dataout, "traces/M_dataout.seq");
	$trace(M_datainrdy, "traces/M_datainrdy.seq");
	$trace(M_datain, "traces/M_datain.seq");
  	$trace(pc_out, "traces/pc_out.seq");

	
    always{
		stall = (rd | wr | mwi)  & ~M_dataoutrdy;
		M_datain = wr ? B : rALU;
		M_cmd = wr ? 0b101#aALU[25:0] : ( mwi ? 0b10001#aALU[25:0] : 0b10#(ns(28))0 );
		M_datainrdy = rd | wr | mwi;

    $display($dec,"Cyc: ", $cycle, "  Resultat: ", M_datain, " ", wr);
    }       
}

////////////////////////////
// MWI Co-processor
////////////////////////////

dp coprocDecoder(

		in cmd : ns(32);
		out run : ns(1);
		out data : ns(27)

	){

	always{
		run = cmd[27];
		data = cmd[26:0];
	}
	
}

dp counter(

		in run : ns(1);
		out counter : ns(5)

	) {

	reg count : ns(5);

	always{
		counter = count + run;
		count = counter;
	}

}

dp coprocRegister(

		in s : ns(5);
		in nData : ns(32);
		out oData : ns(32)

	) {

		reg R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31 : ns(32);

	always{
		oData = (s == 0) ? R0 :
				(s == 1) ? R1 :
				(s == 2) ? R2 :
				(s == 3) ? R3 :
				(s == 4) ? R4 :
				(s == 5) ? R5 :
				(s == 6) ? R6 :
				(s == 7) ? R7 :
				(s == 8) ? R8 :
				(s == 9) ? R9 :
				(s == 10) ? R10 :
				(s == 11) ? R11 :
				(s == 12) ? R12 :
				(s == 13) ? R13 :
				(s == 14) ? R14 :
				(s == 15) ? R15 :
				(s == 16) ? R16 :
				(s == 17) ? R17 :
				(s == 18) ? R18 :
				(s == 19) ? R19 :
				(s == 20) ? R20 :
				(s == 21) ? R21 :
				(s == 22) ? R22 :
				(s == 23) ? R23 :
				(s == 24) ? R24 :
				(s == 25) ? R25 :
				(s == 26) ? R26 :
				(s == 27) ? R27 :
				(s == 28) ? R28 :
				(s == 29) ? R29 :
				(s == 30) ? R30 : R31;

		R0 = (s==0) ? nData : R0;
		R1 = (s==1) ? nData : R1;
    	R2 = (s==2) ? nData : R2;
    	R3 = (s==3) ? nData : R3;
    	R4 = (s==4) ? nData : R4;
    	R5 = (s==5) ? nData : R5;
    	R6 = (s==6) ? nData : R6;
    	R7 = (s==7) ? nData : R7;
    	R8 = (s==8) ? nData : R8;
    	R9 = (s==9) ? nData : R9;
    	R10 = (s==10) ? nData : R10;
    	R11 = (s==11) ? nData : R11;
    	R12 = (s==12) ? nData : R12;
    	R13 = (s==13) ? nData : R13;
    	R14 = (s==14) ? nData : R14;
    	R15 = (s==15) ? nData : R15;
    	R16 = (s==16) ? nData : R16;
    	R17 = (s==17) ? nData : R17;
    	R18 = (s==18) ? nData : R18;
    	R19 = (s==19) ? nData : R19;
    	R20 = (s==20) ? nData : R20;
    	R21 = (s==21) ? nData : R21;
    	R22 = (s==22) ? nData : R22;
    	R23 = (s==23) ? nData : R23;
    	R24 = (s==24) ? nData : R24;
    	R25 = (s==25) ? nData : R25;
    	R26 = (s==26) ? nData : R26;
    	R27 = (s==27) ? nData : R27;
    	R28 = (s==28) ? nData : R28;
    	R29 = (s==29) ? nData : R29;
    	R30 = (s==30) ? nData : R30;
    	R31 = (s==31) ? nData : R31;

	}

}

dp mWI(

    in nData : ns(27);
    in oData : ns(32);
    out rData : ns(32)

  ) {

  reg sum : ns(32);

  always{
    rData = ((sum + nData) - oData) >> 5;
    sum = (sum + nData) - oData;
  }
}


ipblock CoProc(in address : ns(12);
          in wr,rd   : ns(1);
          in idata   : ns(32);
          out odata : ns(32)){

  iptype "ram";
  ipparm "size=4096";
  ipparm "wl=32";
}

dp coproc(
	in datain : ns(32);
   	in datainrdy : ns(1);
   	out dataout : ns(32);
   	out dataoutrdy : ns(1);
   	in stall : ns(1);
	in cmd : ns(32))
{


	reg datainrdyr : ns(1);
	reg cmdr : ns(32);
	reg datainr : ns(32);
	reg dataoutr : ns(32);
	reg stallr : ns(1);

  sig nData, oData, rData : ns(32);
  sig countSig : ns(5);
  sig run : ns(1);
   sig wr,rd : ns(1);
   sig address : ns(12);
   sig idata : ns(32);
   

  use CoProc(address,0,0,0,0);
  use coprocDecoder(cmd, run, nData);
  use counter(run, countSig);
  use coprocRegister(countSig, nData, oData);
  use mWI(nData, oData, rData);

    always{

      $display($dec, "Rdata: ", rData);
      dataout = rData;
      stallr = stall;

    }       

   sfg captureData{
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       datainr = datain;
       cmdr = cmd;
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0; 
   }
}


fsm CoProc_cntrl(coproc){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy) -> s0;
       else (awaithandshake) -> s1;
}


////////////////////////////
// Bus
////////////////////////////

dp bus(
        // CPU interface
        in reqCPU  : ns(1);
        in cmdCPU : ns(32); // What command should be executed at the unit receiving this + ID of destination unit is in 4 MSB
        in dataoutCPU : ns(32); // data from the CPU
        out ackCPU : ns(1); 
                
        out dataRdyCPU : ns(1); // high when unit has data, which is ready for the CPU
        out datainCPU : ns(32); // data to the CPU
        in waitCPU : ns(1); // Remains high until the CPU has read the data
                
        // Data Memory interface
        out reqDataMem : ns(1);
        out cmdDataMem : ns(32);
        out datainDataMem : ns(32); // data to Data memory from CPU
        in ackDataMem : ns(1);
               
        in dataRdyDataMem : ns(1); 
        in dataoutDataMem : ns(32); // data from Data memory to CPU
        out waitDataMem : ns(1);

        // CO-processor interface
        out reqCoProc : ns(1);
        out cmdCoProc : ns(32);
        out datainCoProc : ns(32); // data to Data memory from CPU
        in ackCoProc : ns(1);
               
        in dataRdyCoProc : ns(1); 
        in dataoutCoProc : ns(32); // data from Data memory to CPU
        out waitCoProc : ns(1);
        
        // Sensor interface
        out reqSensor : ns(1);
        out cmdSensor : ns(32); // only cmd is needed to the sensor
        out NotUsed1 : ns(32); // dataport not used
        in ackSensor : ns(1);
        
        in dataRdySensor : ns(1);
        in dataoutSensor : ns(32);
        out waitSensor : ns(1);
        
        // Output interface
        out reqOutput : ns(1);
        out cmdOutput : ns(32);
        out datainOutput : ns(32); // data to output from CPU
        in ackOutput : ns(1);
               
        in dataRdyOutput : ns(1); 
        in dataoutOutput : ns(32); // data from output to CPU
        out waitOutput : ns(1);
        
        // IDs
        in ID_Sensor : ns(4);
        in ID_DataMem : ns(4);
        in ID_Output : ns(4);
		in ID_CoProc : ns(4)

        ){
        
        $trace(reqDataMem, "traces/reqDataMem.seq");
        $trace(cmdDataMem, "traces/cmdDataMem.seq");
        $trace(datainDataMem, "traces/datainDataMem.seq");
        $trace(ackDataMem, "traces/ackDataMem.seq");
        $trace(dataRdyDataMem, "traces/dataRdyDataMem.seq");
        $trace(dataoutDataMem, "traces/dataoutDataMem.seq");
        $trace(waitDataMem, "traces/waitDataMem.seq");
        
        $trace(reqSensor, "traces/reqSensor.seq");
        $trace(cmdSensor, "traces/cmdSensor.seq");
        $trace(ackSensor, "traces/ackSensor.seq");
        $trace(dataRdySensor, "traces/dataRdySensor.seq");
        $trace(dataoutSensor, "traces/dataoutSensor.seq");
        $trace(waitSensor, "traces/waitSensor.seq");
        
        $trace(reqOutput, "traces/reqOutput.seq");
        $trace(cmdOutput, "traces/cmdOutput.seq");
        $trace(datainOutput, "traces/datainOutput.seq");
        $trace(ackOutput, "traces/ackOutput.seq");
        $trace(dataRdyOutput, "traces/dataRdyOutput.seq");
        $trace(dataoutOutput, "traces/dataoutOutput.seq");
        $trace(waitOutput, "traces/waitOutput.seq");
        
        $trace(reqCPU, "traces/reqCPU.seq");
        $trace(cmdCPU, "traces/cmdCPU.seq");
        $trace(dataoutCPU, "traces/dataoutCPU.seq");
        $trace(ackCPU, "traces/ackCPU.seq");
        $trace(dataRdyCPU, "traces/dataRdyCPU.seq");
        $trace(datainCPU, "traces/datainCPU.seq");
        $trace(waitCPU, "traces/waitCPU.seq");
        
        always{
          ackCPU = (cmdCPU[28:31] == ID_DataMem & ackDataMem) | (cmdCPU[28:31] == ID_Sensor & ackSensor) | (cmdCPU[28:31] == ID_Output & ackOutput) | (cmdCPU[28:31] == ID_CoProc & ackCoProc); // "OR" all slaves ack signals here
          dataRdyCPU = dataRdyDataMem | dataRdySensor | dataRdyOutput; // Only one slave can access the bus at any one time (only the slave which responds to the cmd)
          
          reqDataMem = reqCPU;
          cmdDataMem = (reqCPU) ? cmdCPU : 0;
          datainDataMem = (reqCPU) ? dataoutCPU : 0;

          reqCoProc = reqCPU;
          cmdCoProc = (reqCPU) ? cmdCPU : 0;
          datainCoProc = (reqCPU) ? dataoutCPU : 0;
          
          reqSensor = reqCPU;
          cmdSensor = (reqCPU) ? cmdCPU : 0;
          waitSensor = waitCPU;
          
          reqOutput = reqCPU;
          cmdOutput = (reqCPU) ? cmdCPU : 0;
          datainOutput = (reqCPU) ? dataoutCPU : 0;
          waitOutput = waitCPU;
                    
          datainCPU = (dataRdyDataMem) ? dataoutDataMem : 
                      (dataRdySensor) ? dataoutSensor : 
                      (dataRdyOutput) ? dataoutOutput :
                      (dataRdyCoProc) ? dataoutCoProc :
                      0; // arbitrate here when multiple slaves
          waitDataMem = waitCPU;
          waitCoProc = waitCPU;
          
          NotUsed1 = 0;
        }       
}

dp slavebusinterface(
          // Bus ports
          in bus_req : ns(1);
          in bus_cmd : ns(32);
          in bus_datain : ns(32);
          out bus_ack : ns(1);
          
          out bus_rdy : ns(1);
          out bus_dataout : ns(32);
          in bus_wait : ns(1);
          
          // Slave ports - data going in to the slave does not need a handshake. 
          in datain : ns(32); // data from main unit to interface
          in datainrdy : ns(1); // slave signals that data and cmd is rdy
          out dataout : ns(32); // data to slave
          out cmdout : ns(32); // cmd to slave
          out dataoutrdy : ns(1); // signal to slave telling that the data on dataout is rdy
          in targetID : ns(4); // specifies the ID used in the MSB of CMD, which is intended for this slave
          out stallSlave : ns(1) // true if the slaveinterface is currently busy and cannot receive data from the slave
          ){
          
          reg bus_reqr : ns(1);
          reg bus_waitr : ns(1);
          reg datainrdyr : ns(1);
          reg targetIDr : ns(4);
          reg bus_cmdr : ns(32);
          
          always{
             bus_reqr = bus_req;
             bus_waitr = bus_wait;
             datainrdyr = datainrdy;
             targetIDr = targetID;
             bus_cmdr = bus_cmd;
          }
          
          sfg externalData{
             bus_ack = 1;
             dataout = bus_datain;
             cmdout = bus_cmd;
             dataoutrdy = bus_cmd[28:31] == targetID; // is the cmd and data intended for this slave?
             
             bus_rdy = 0;
             bus_dataout = 0;
             stallSlave = 1;
          }
          
          sfg ackExternalData{
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             bus_rdy = 0;
             bus_dataout = 0;
             stallSlave = 1;
          }
          
          sfg internalData{
             bus_dataout = datain;
             bus_rdy = 1;
             
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             stallSlave = 1;
          }
          
          sfg ackInternalData{
             bus_rdy = 0;
             bus_dataout = 0;
             
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             stallSlave = 1;
          }
          
          sfg nothing{
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             bus_rdy = 0;
             bus_dataout = 0;
             stallSlave = 0;
          }
          
}

fsm slavebusinterface_cntrl(slavebusinterface){
   initial s0;
   state s1,s2,s3;
   
   // condition explanation: Only ack if the cmd is intended for this slave
   @s0 if (bus_reqr == 1 & bus_cmdr[28:31] == targetIDr) then (externalData) -> s1;
       else (nothing) -> s0;
   @s1 if (bus_reqr == 0) then (ackExternalData) ->s2;
       else (externalData) -> s1;
   @s2 if (datainrdyr == 1) then (internalData) -> s3;
       else (nothing) -> s2;
   @s3 if (bus_waitr == 1) then (ackInternalData) -> s0;
       else (internalData) -> s3;
   
}

dp slavebusinterface2 : slavebusinterface
dp slavebusinterface3 : slavebusinterface
dp slavebusinterface4 : slavebusinterface

dp masterbusinterface(
          // Bus ports
          out bus_req : ns(1); // master request the bus
          out bus_cmd : ns(32); // cmd to target unit
          out bus_dataout : ns(32); // data to target unit
          in bus_ack : ns(1); // ack from bus
                      
          in bus_rdy : ns(1); // rdy from bus
          in bus_datain : ns(32); // data targeted for the master
          out bus_wait : ns(1); // wait to bus
                    
          // Master ports - data going in to the master does not need a handshake. 
          in datain : ns(32); // data from main unit to interface
          in cmd : ns(32); // command from main unit to interface
          in datainrdy : ns(1); // master signals that data and cmd is rdy
          out dataout : ns(32); // data to master
          out dataoutrdy : ns(1) // signal to master telling that the data on dataout is rdy
          ){
          
//          $trace(bus_req, "traces/M_bus_req.seq");
//          $trace(bus_cmd, "traces/M_bus_cmd.seq");
//          $trace(bus_dataout, "traces/M_bus_dataout.seq");
//          $trace(bus_ack, "traces/M_bus_ack.seq");
//          $trace(bus_rdy, "traces/M_bus_rdy.seq");
//          $trace(bus_datain, "traces/M_bus_datain.seq");
//          $trace(bus_wait, "traces/M_bus_wait.seq");
          
//          $trace(datain, "traces/M_datain_int.seq");
//          $trace(cmd, "traces/M_cmd_int.seq");
//          $trace(datainrdy, "traces/M_datainrdy_int.seq");
//          $trace(dataout, "traces/M_dataout_int.seq");
//          $trace(dataoutrdy, "traces/M_dataoutrdy_int.seq");
          
          reg bus_ackr : ns(1);
          reg bus_rdyr : ns(1);
          reg datainrdyr : ns(1);
          reg cmdr : ns(32);
          reg datainr : ns(32);
                      
          always{
             bus_ackr = bus_ack;
             bus_rdyr = bus_rdy;
             datainrdyr = datainrdy;
             cmdr = cmd;
             datainr = datain;
          }
          
          sfg internalData{
             bus_req = 1;
             bus_cmd = cmd;
             bus_dataout = datain;
             
             bus_wait = 0;
             dataout = 0;
             dataoutrdy = 0;
          }
          
          sfg ackInternalData{
             bus_req = 0;
             bus_cmd = cmdr;
             bus_dataout = datainr;
             
             bus_wait = 0;
             dataout = 0;
             dataoutrdy = 0;
          }
          
          sfg externalData{
             bus_wait = 1;
             dataout = bus_datain;
             dataoutrdy = 1;
             
             bus_req = 0;
             bus_cmd = 0;
             bus_dataout = 0;
          }
          
          sfg ackExternalData{
              bus_wait = 0;
              dataout = 0;
              dataoutrdy = 0;
              
              bus_req = 0;
              bus_cmd = 0;
              bus_dataout = 0;
          }
                    
          sfg nothing{
             bus_req = 0;
             bus_cmd = cmdr;
             bus_dataout = datainr;
             
             bus_wait = 0;
             dataout = 0;
             dataoutrdy = 0;
          }
}

fsm masterbusinterface_cntrl(masterbusinterface){
   initial s0;
   state s1,s2,s3,s4;
   
   @s0 if (datainrdyr == 1) then (internalData) -> s1;
       else (nothing) -> s0; // do nothing
   @s1 if (bus_ackr == 1) then (ackInternalData) -> s3; // go to s3 in order to make sure the bus will not initiate a new communication due to the fact that the CPU is stalled at this particular bus-using instruction
       else (internalData) -> s1; // do nothing
   @s3 if (bus_rdyr == 1) then (externalData) -> s2;
       else (nothing) -> s3;
   @s2 (ackExternalData) -> s4; 
   @s4 (nothing) -> s0; // Wait one more cycle to synchronize with PC
}

dp bus_toplevel(
           // Master interface
           in M_datain : ns(32);
           in M_cmd : ns(32);
           in M_datainrdy : ns(1);
           out M_dataout : ns(32);
           out M_dataoutrdy : ns(1);
           //out stall_cpu : ns(1);
           
           // Slave interface (datamemory)
           in DM_datain : ns(32);
           in DM_datainrdy : ns(1);
           out DM_dataout : ns(32);
           out DM_cmdout : ns(32);
           out DM_dataoutrdy : ns(1);
           out DM_stall : ns(1);

           // Slave interface (co-processor)
           in CP_datain : ns(32);
           in CP_datainrdy : ns(1);
           out CP_dataout : ns(32);
           out CP_cmdout : ns(32);
           out CP_dataoutrdy : ns(1);
           out CP_stall : ns(1);
           
           // Slave interface (Sensor)
           in SS_datain : ns(32);
           in SS_datainrdy : ns(1);
           out SS_dataout : ns(32); // data port not used in sensor
           out SS_cmdout : ns(32);
           out SS_dataoutrdy : ns(1);
           out SS_stall : ns(1);
           
           // Slave interface (output)
           in OP_datain : ns(32);
           in OP_datainrdy : ns(1);
           out OP_dataout : ns(32); // data port not used in sensor
           out OP_cmdout : ns(32);
           out OP_dataoutrdy : ns(1);
           out OP_stall : ns(1)
           ){
           
           sig reqCPU,reqDataMem,reqCoProc,reqSensor,reqOutput,ackCPU,ackDataMem,ackCoProc,ackSensor,ackOutput,dataRdyCPU,dataRdyDataMem,dataRdyCoProc,dataRdySensor,dataRdyOutput,waitCPU,waitDataMem,waitCoProc,waitSensor,waitOutput: ns(1);
           sig cmdCPU,cmdDataMem,cmdCoProc,cmdSensor,cmdOutput,dataoutCPU,datainDataMem,datainCoProc,datainSensor,datainOutput,datainCPU,dataoutDataMem,dataoutCoProc,dataoutSensor,dataoutOutput : ns(32);
           reg ID_DataMem : ns(4);
           reg ID_Sensor : ns(4);
           reg ID_Output : ns(4);
           reg ID_CoProc : ns(4);
           
           $trace(DM_datain, "traces/DM_datain.seq");
           $trace(DM_datainrdy, "traces/DM_datainrdy.seq");
           $trace(DM_dataout, "traces/DM_dataout.seq");
           $trace(DM_cmdout, "traces/DM_cmdout.seq");
           $trace(DM_dataoutrdy, "traces/DM_dataoutrdy.seq");
           
           $trace(SS_datain, "traces/SS_datain.seq");
           $trace(SS_datainrdy, "traces/SS_datainrdy.seq");
           $trace(SS_dataout, "traces/SS_dataout.seq");
           $trace(SS_cmdout, "traces/SS_cmdout.seq");
           $trace(SS_dataoutrdy, "traces/SS_dataoutrdy.seq");
           
           $trace(OP_datain, "traces/OP_datain.seq");
           $trace(OP_datainrdy, "traces/OP_datainrdy.seq");
           $trace(OP_dataout, "traces/OP_dataout.seq");
           $trace(OP_cmdout, "traces/OP_cmdout.seq");
           $trace(OP_dataoutrdy, "traces/OP_dataoutrdy.seq");
           
           use bus(reqCPU,cmdCPU,dataoutCPU,ackCPU,dataRdyCPU,datainCPU,waitCPU, // master
                   reqDataMem,cmdDataMem,datainDataMem,ackDataMem,dataRdyDataMem,dataoutDataMem,waitDataMem, // Data memory (slave)
                   reqCoProc,cmdCoProc,datainCoProc,ackCoProc,dataRdyCoProc,dataoutCoProc,waitCoProc, // Co-Processor (slave)
                   reqSensor,cmdSensor,datainSensor,ackSensor,dataRdySensor,dataoutSensor,waitSensor,
                   reqOutput,cmdOutput,datainOutput,ackOutput,dataRdyOutput,dataoutOutput,waitOutput,// Sensor (slave)
                   ID_Sensor,ID_DataMem,ID_Output,ID_CoProc); 
           
           use masterbusinterface(reqCPU,cmdCPU,dataoutCPU,ackCPU,dataRdyCPU,datainCPU,waitCPU, // Bus interface
                                  //CPUdatain,CPUcmd,CPUdatainrdy,CPUdataout,CPUdataoutrdy
                                  M_datain,M_cmd,M_datainrdy,M_dataout,M_dataoutrdy);

           use slavebusinterface(reqDataMem,cmdDataMem,datainDataMem,ackDataMem,dataRdyDataMem,dataoutDataMem,waitDataMem, // Bus interface (data memory)
                             //DMDatain,DMDatainrdy,DMDataout,DMCmdout,DMDataoutrdy,
                             DM_datain,DM_datainrdy,DM_dataout,DM_cmdout,DM_dataoutrdy,ID_DataMem,DM_stall);
                             
           use slavebusinterface2(reqSensor,cmdSensor,datainSensor,ackSensor,dataRdySensor,dataoutSensor,waitSensor, // Bus interface (Sensor)
                              //SensorDatain,SensorDatainrdy,NotUsed2,SensorCmdout,SensorDataoutrdy,
                              SS_datain,SS_datainrdy,SS_dataout,SS_cmdout,SS_dataoutrdy,ID_Sensor,SS_stall);
                              
           use slavebusinterface3(reqOutput,cmdOutput,datainOutput,ackOutput,dataRdyOutput,dataoutOutput,waitOutput, // Bus interface (data memory)
                              //OPDatain,OPDatainrdy,OPDataout,OPCmdout,OPDataoutrdy,
                              OP_datain,OP_datainrdy,OP_dataout,OP_cmdout,OP_dataoutrdy,ID_Output,OP_stall);

           use slavebusinterface4(reqCoProc,cmdCoProc,datainCoProc,ackCoProc,dataRdyCoProc,dataoutCoProc,waitCoProc,
           					CP_datain,CP_datainrdy,CP_dataout,CP_cmdout,CP_dataoutrdy,ID_CoProc,CP_stall);
           
           always{
              ID_Sensor = 0x1;
              ID_DataMem = 0x2;
              ID_Output = 0x3;
              ID_CoProc = 0x4;
           }
}

////////////////////////////
// Auxiliary units
////////////////////////////
ipblock datamem(in address : ns(12);
          in wr,rd   : ns(1);
          in idata   : ns(32);
          out odata : ns(32)){

  iptype "ram";
  ipparm "size=4096";
  ipparm "wl=32";
  ipparm "file=datamemory.txt"; // initializes content. File syntax needs to be "addr data "* (the last space can also be a linebreak. NB! Should the students do a manual loading of the RAM to simulate a "real" system or is it ok if they just use this parameter?
  //ipparm "file=sddb48hex2.ecg"; 
}

dp DataMem(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1) // true if the slave is currently busy (with handshaking) and cannot receive new data.
   ){
   
   sig wr,rd : ns(1);
   sig address : ns(12);
   sig idata : ns(32);
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);
   
   use datamem(address,wr,rd,idata,dataout);
   
   $trace(address, "traces/DM_address.seq");
   $trace(wr, "traces/DM_wr.seq");
   $trace(rd, "traces/DM_rd.seq");
   $trace(idata, "traces/DM_idata.seq");
   
   always{
       stallr = stall;
       rd = cmdr[27] == 0;
       wr = cmdr[27] == 1;
       address = (cmdr[27] == 0) ? datainr : 0b00000 # cmdr[0:26]; // if Store Word instruction, use cmd[0:26] as address. If Load Word instruction use datain as address
       idata = (cmdr[27] == 0) ? 0 : datainr; // if store word use datain as data to be stored, if load word, just set idata to 0
     //$display($dec, "Cycle: ", $cycle);
   	 //$display($dec, "   address: ", address);
   }
   
   sfg captureData{
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       datainr = datain;
       cmdr = cmd;
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0; 
   }
   
}

fsm DataMem_cntrl(DataMem){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy) -> s0;
       else (awaithandshake) -> s1;
       
}

ipblock sensordata(in address : ns(5);
          in wr,rd   : ns(1);
          in idata   : ns(32);
          out odata : ns(32)){

  iptype "ram";
  ipparm "size=32";
  ipparm "wl=32";
  ipparm "file=sddb48hex.ecg"; // initializes content
  
}

dp Sensor(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1) // true if the slave is currently busy (with handshaking) and cannot receive new data.
   ){
   
    sig address : ns(5);
    sig wr,rd : ns(1);
    sig idata,odata : ns(32);
    
    use sensordata(address,wr,rd,idata,odata);

   	reg c : ns(10);
   	reg reset : ns(1);
   	reg addr : ns(8);
   	reg LIMIT : ns(10); // How many cycles to wait before it "acquires" the next datapoint (simulated sampling rate)
   	reg stallr : ns(1);
   	reg datainrdyr : ns(1);
   	
   	$trace(odata, "traces/SS_data.seq");
   	$trace(c, "traces/SS_c.seq");
   	
   	always{
   		wr = 0;
   		idata = 0;
   		LIMIT = 9; // 0 means 1 cycles => Pick new point each cycle TODO: Set proper sampling rate
   		address = addr;
   		
   		dataout = odata;
   		//dataoutrdy = 0;
   		stallr = stall;
   		//$display($dec, "Cycle: ", $cycle);
   		//$display($dec, "   data: ", odata);
   		//$display($dec, "   address: ", address);
   	}
   	
   sfg captureData{  
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       // Removed all datain and cmd capturing registers, due to the fact that the sensor only has one function, which is to send data once requested
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0; 
   }

	sfg count{
    	c = c + 1;
    	rd = 0;
	}
   	
   	sfg addressUpdate{
   	   addr = addr + 1;
   	   rd = 1;
   	   c = 0;
   	}

}

fsm sensor_cntrl(Sensor){
   initial s0;
   state s1;
       
   @s0 if (datainrdyr == 1 & stallr == 0 & c == LIMIT) then (addressUpdate,resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 0 &  c != LIMIT) then (count,resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1 & c == LIMIT) then (addressUpdate,nothing) -> s1;
       else if (datainrdyr == 1 & stallr == 1 & c != LIMIT) then (count,nothing) -> s1;
       else if (datainrdyr == 0 & c == LIMIT) then (addressUpdate,captureData) -> s0;
       else (count,captureData) -> s0;
   @s1 if (stallr == 0 & c == LIMIT) then (addressUpdate,resetAndSignalRdy) -> s0;
       else if (stallr == 0 & c != LIMIT) then (count,resetAndSignalRdy) -> s0;
       else if (stallr == 1 & c == LIMIT) then (addressUpdate,awaithandshake) -> s1;
       else (count,awaithandshake) -> s1;
}

dp Output(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1); // true if the slave is currently busy (with handshaking) and cannot receive new data.
   out FilterOut : tc(32)
   ){
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);
   reg count : ns(10);
   reg FilterOut_r : tc(32);
   
   $trace(FilterOut, "traces/FilterOut.seq");
   $trace(count, "traces/out_count.seq");
   
   always{
       stallr = stall;
       dataout = 0x123;
   }
   
   sfg captureData{
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       datainr = datain;
       cmdr = cmd;
       
       FilterOut = FilterOut_r;
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
      
      FilterOut = FilterOut_r;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0;
       
       FilterOut = FilterOut_r;
   }
   
   sfg setFilterOut{
      FilterOut = datainr;
      FilterOut_r = datainr;
      count = count + 1;
   }
   
}

fsm Output_cntrl(Output){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy,setFilterOut) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy,setFilterOut) -> s0;
       else (awaithandshake) -> s1;
       
}

////////////////////////////
// System connections
////////////////////////////
system CPUsystem{

   CPU(CPUdatain,CPUcmd,CPUdatainrdy,CPUdataout,CPUdataoutrdy);
   
   bus_toplevel(CPUdatain,CPUcmd,CPUdatainrdy,CPUdataout,CPUdataoutrdy, // master unit
           DMDatain,DMDatainrdy,DMDataout,DMCmdout,DMDataoutrdy,DMStall, // slave (data memory)
           CPDatain,CPDatainrdy,CPDataout,CPCmdout,CPDataoutrdy,CPStall, // slave (Co-processor)
           SensorDatain,SensorDatainrdy,SensorDataout,SensorCmdout,SensorDataoutrdy,SensorStall,  // slave (sensor)
           OPDatain,OPDatainrdy,OPDataout,OPCmdout,OPDataoutrdy,OPStall); // slave (Output)
           
   DataMem(DMDataout,DMCmdout,DMDataoutrdy,DMDatain,DMDatainrdy,DMStall); // Data Memory Unit
   Sensor(SensorDataout,SensorCmdout,SensorDataoutrdy,SensorDatain,SensorDatainrdy,SensorStall);
   Output(OPDataout,OPCmdout,OPDataoutrdy,OPDatain,OPDatainrdy,OPStall,FilterOut);
   coproc(CPDatain,CPDatainrdy,CPDataout,CPCmdout,CPDataoutrdy,CPStall); // Co-processor
}
